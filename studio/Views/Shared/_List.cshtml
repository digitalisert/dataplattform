@using System.Collections.Generic
@using Digitalisert.Dataplattform.Studio.Models
@model IEnumerable<ResourceModel.Resource>

@{
    Dictionary<string, string[]> highlightings = ViewBag.ResourceSearchHighlightings;
}

<ul class="list has-visible-pointer-controls ml-0 mt-0">
    @foreach(var resource in Model.Where(r => r.ResourceId != null || (r.Code ?? new string[] {}).Any() || (r.Title ?? new string[] {}).Any() || (r.SubTitle ?? new string[] {}).Any()))
    {
        <li class="list-item is-align-items-start">
            <div class="list-item-content">
                <div class="list-item-title" data-tab-content>
                    @if (resource.ResourceId == null)
                    {
                        <h2 class="title">
                            <small>@resource.Code?.FirstOrDefault()</small>
                            @resource.Title?.FirstOrDefault()
                        </h2>
                        @if ((resource.SubTitle ?? new string[] { }).Any())
                        {
                            <h3 class="subtitle">@resource.SubTitle.FirstOrDefault()</h3>
                        }
                    }
                    else {
                        <a href="/Studio/Resource/@(resource.Context)/@(resource.ResourceId)">
                            <small class="subtitle is-5">@resource.Code?.FirstOrDefault()</small>
                            <span class="title is-4">@resource.Title?.FirstOrDefault()</span>
                            @if (resource.SubTitle.Any())
                            {
                                <small class="subtitle is-6">@resource.SubTitle.FirstOrDefault()</small>
                            }
                        </a>
                    }
                </div>
                <div class="list-item-description">
                    @foreach (var body in resource.Body ?? new string[] { })
                    {
                        <p class="text-break">@body</p>
                    }
                    @if (resource.Id != null && highlightings.ContainsKey(resource.Id))
                    {
                        <small>
                            @foreach (var fragment in highlightings[resource.Id])
                            {
                                @Html.Raw(Markdig.Markdown.ToHtml(fragment));
                            }
                        </small>
                    }
                </div>
            </div>
            <div class="list-item-controls is-flex-shrink-1">
                <div class="tags are-medium is-right mb-0">
                    <span class="tag is-primary">@resource.Context</span>
                    @foreach (var type in resource.Type ?? new string[] { })
                    {
                        <span class="tag is-link">@type</span>
                    }
                    @foreach (var subType in resource.SubType ?? new string[] { })
                    {
                        <span class="tag is-info">@subType</span>
                    }
                    @foreach (var status in resource.Status ?? new string[] { })
                    {
                        <span class="tag">@status</span>
                    }
                </div>
                @if ((resource.Tags ?? new string[] { }).Any())
                {
                    <div class="field is-grouped is-grouped-multiline is-grouped-right">
                        @if (resource.Tags.Any(t => !t.Contains(":")))
                        {
                            <div class="control">
                                <div class="tags">
                                    @foreach (var tags in (resource.Tags ?? new string[] { }).Where(t => !t.Contains(":")))
                                    {
                                        <span class="tag">@tags</span>
                                    }
                                </div>
                            </div>
                        }
                        @foreach(var tagG in resource.Tags.Where(t => t.Contains(":")).GroupBy(t => t.Substring(0, t.IndexOf(":"))))
                        {
                            <div class="control">
                                <div class="tags has-addons">
                                    <span class="tag is-info is-light">@tagG.Key</span>
                                    @foreach (var tags in tagG)
                                    {
                                        <span class="tag is-info">@tags.Substring(tagG.Key.Length + 1)</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </li>
    }
</ul>
