@using Digitalisert.Dataplattform.Studio.Models
@model ResourceModel.Resource

<h1 class="title">
    @if ((Model.Code ?? new string[] { }).Any())
    {
        <small>@Model.Code.FirstOrDefault()</small>
    }
    @Model.Title?.FirstOrDefault()
</h1>
@if ((Model.SubTitle ?? new string[] { }).Any())
{
    <h2 class="subtitle mb-2">@Model.SubTitle.FirstOrDefault()</h2>
}

<div class="buttons mb-0">
    <a href="/Studio/Resource?resources[0].Context=@(Model.Context)" class="button is-primary">@Model.Context</a>
    @foreach (var type in Model.Type ?? new string[] { })
    {
        <a href="/Studio/Resource?resources[0].Type=@type" class="button is-link">@type</a>
    }

    @foreach (var subType in Model.SubType ?? new string[] { })
    {
        <a href="/Studio/Resource?resources[0].SubType=@subType" class="button is-info">@subType</a>
    }

    @foreach (var status in Model.Status ?? new string[] { })
    {
        <a href="/Studio/Resource?resources[0].Status=@status" class="button">@status</a>
    }
</div>

@if ((Model.Tags ?? new string[] { }).Any())
{
    <div class="field is-grouped is-grouped-multiline">
        @if (Model.Tags.Any(t => !t.Contains(":")))
        {
            <div class="control">
                <div class="tags">
                    @foreach (var tags in (Model.Tags ?? new string[] { }).Where(t => !t.Contains(":")))
                    {
                        <span class="tag">@tags</span>
                    }
                </div>
            </div>
        }
        @foreach(var tagG in Model.Tags.Where(t => t.Contains(":")).GroupBy(t => t.Substring(0, t.IndexOf(":"))))
        {
            <div class="control">
                <div class="tags has-addons">
                    <span class="tag is-info is-light">@tagG.Key</span>
                    @foreach (var tags in tagG)
                    {
                        <span class="tag is-info">@tags.Substring(tagG.Key.Length + 1)</span>
                    }
                </div>
            </div>
        }
    </div>
}

@foreach (var body in Model.Body ?? new string[] { })
{
    @Html.Raw(Markdig.Markdown.ToHtml(body))
}

<div class="content">
  <dl>
      @foreach (var property in Model.Properties ?? new ResourceModel.Property[] { } )
      {
          <dt class="label mb-0">@property.Name</dt>
          <dd>
              @foreach (var value in property.Value ?? new string[] { })
              {
                  if (value.Length < 300)
                  {
                      <p>@value</p>
                  }
                  else
                  {
                      <p>
                          <span>@(value.Substring(0, 300))</span>
                          <span id="@(property.Name)-collapse" class="is-hidden" data-toggler=".hide">@(value.Substring(300))</span>
                          <a data-toggle="@(property.Name)-collapse">...</a>
                      </p>
                  }
              }
              @if (property.Tags.Contains("@query"))
              {
                  <a href="/Studio/ResourcePropertyAttribute/@property.Name/@Model.Context/@Model.ResourceId">CSV</a>
              }
              @if (property.Resources != null && property.Resources.Any())
              {
                  <partial name="~/Views/Shared/_List.cshtml" model="property.Resources"/>
              }
          </dd>
      }
  </dl>
</div>
